#!/usr/bin/env bash
# sotingos-ap.sh
# Usage example:
# sudo ./sotingos-ap.sh -i wlan0 -s "MyAP" -p "MyPass123" -g 192.168.50.1 \
#    -r 192.168.50.10,192.168.50.200 -d ./mydns.txt -u 8.8.8.8,1.1.1.1 -f eth0
#
# -d <dnsfile>  : hosts file (lines: "ap.test 192.168.50.1" OR "192.168.50.1 ap.test")
# -u <upstreams>: comma-separated upstream DNS servers (e.g. 8.8.8.8,1.1.1.1)
# If -u omitted, dnsmasq will use system DNS (/etc/resolv.conf).

set -euo pipefail

# Defaults
IFACE=""
SSID="SotingOS_AP"
PASSPHRASE="StrongPass123"
AP_IP="192.168.50.1"           # gateway address (AP)
DHCP_RANGE_START="192.168.50.10"
DHCP_RANGE_END="192.168.50.200"
DNS_FILE=""                    # path to user DNS/hosts file
UPSTREAM_DNS=""                # comma separated upstream DNS servers
FORWARD_IF="eth0"              # optional upstream interface for NAT
TMPDIR="/tmp/sotingos-$$"      # unique tmp dir per run
HOSTAPD_CONF="$TMPDIR/hostapd.conf"
DNSMASQ_CONF="$TMPDIR/dnsmasq.conf"
HOSTS_FILE="$TMPDIR/hosts.addn"

usage() {
  cat <<EOF
Usage: sudo $0 -i <iface> [options]

Required:
  -i <iface>              wireless interface (e.g. wlan0)

Options:
  -s <ssid>               AP SSID (default: $SSID)
  -p <passphrase>         WPA2 passphrase (default: $PASSPHRASE)
  -g <ap_ip>              AP IP / gateway (default: $AP_IP)
  -r <start,end>          DHCP range (default: $DHCP_RANGE_START,$DHCP_RANGE_END)
  -d <dnsfile>            path to DNS/hosts file (lines: "ap.test 192.168.50.1" or "192.168.50.1 ap.test")
  -u <up1,up2>            upstream DNS servers (comma separated, e.g. 8.8.8.8,1.1.1.1). If omitted use system DNS.
  -f <forward_iface>      upstream iface to NAT out (optional, default: $FORWARD_IF)
  -h                      show this help
EOF
  exit 1
}

# Parse args
while getopts "i:s:p:g:r:d:u:f:h" opt; do
  case "$opt" in
    i) IFACE="$OPTARG" ;;
    s) SSID="$OPTARG" ;;
    p) PASSPHRASE="$OPTARG" ;;
    g) AP_IP="$OPTARG" ;;
    r) IFS=',' read -r DHCP_RANGE_START DHCP_RANGE_END <<< "$OPTARG" ;;
    d) DNS_FILE="$OPTARG" ;;
    u) UPSTREAM_DNS="$OPTARG" ;;
    f) FORWARD_IF="$OPTARG" ;;
    h|*) usage ;;
  esac
done

if [[ -z "$IFACE" ]]; then
  echo "Error: interface (-i) is required."
  usage
fi

# Derive net prefix and network used for iptables NAT rules (assume /24)
IP_PREFIX="${AP_IP%.*}"
NET_IP="$IP_PREFIX.0/24"

# Check root
if [[ $EUID -ne 0 ]]; then
  echo "Run as root: sudo $0 -i <iface> ..."
  exit 2
fi

# Check required binaries
for cmd in hostapd dnsmasq tcpdump iptables ip; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    echo "Missing command: $cmd. Install (apt install hostapd dnsmasq tcpdump iptables iproute2) and retry."
    exit 3
  fi
done

# Prepare tmp dir and configs
mkdir -p "$TMPDIR"
chmod 700 "$TMPDIR"

# hostapd config
cat > "$HOSTAPD_CONF" <<EOF
interface=$IFACE
driver=nl80211
ssid=$SSID
hw_mode=g
channel=6
ieee80211n=1
wmm_enabled=1

auth_algs=1
wpa=2
wpa_key_mgmt=WPA-PSK
wpa_pairwise=CCMP
rsn_pairwise=CCMP
wpa_passphrase=$PASSPHRASE

country_code=US
logger_syslog=-1
logger_stdout=1
EOF

# Prepare hosts addn file for dnsmasq.
if [[ -n "$DNS_FILE" && -f "$DNS_FILE" ]]; then
  > "$HOSTS_FILE"
  while IFS= read -r line; do
    [[ -z "$line" || "${line:0:1}" == "#" ]] && continue
    set -- $line
    if [[ $# -eq 2 ]]; then
      a="$1"; b="$2"
      if [[ "$a" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "$a $b" >> "$HOSTS_FILE"
      else
        echo "$b $a" >> "$HOSTS_FILE"
      fi
    else
      echo "# ignoring malformed line: $line" >> "$HOSTS_FILE"
    fi
  done < "$DNS_FILE"
else
  # No DNS file: create default mapping for AP hostname from SSID
  HOSTNAME="$(echo "$SSID" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')"
  echo "$AP_IP $HOSTNAME" > "$HOSTS_FILE"
fi

# dnsmasq config
# If UPSTREAM_DNS set -> add 'no-resolv' and server= lines
cat > "$DNSMASQ_CONF" <<EOF
# dnsmasq config generated by sotingos-ap.sh
interface=$IFACE
bind-interfaces

dhcp-range=$DHCP_RANGE_START,$DHCP_RANGE_END,12h
dhcp-option=3,$AP_IP     # gateway
dhcp-option=6,$AP_IP     # DNS server = this AP

addn-hosts=$HOSTS_FILE
no-daemon
log-facility=-          # stdout
log-dhcp
EOF

# Append upstream DNS servers if user supplied (-u). If not supplied, dnsmasq will use /etc/resolv.conf.
if [[ -n "$UPSTREAM_DNS" ]]; then
  # make dnsmasq use only given upstreams
  {
    echo "no-resolv"
    IFS=',' read -ra UPS <<< "$UPSTREAM_DNS"
    for u in "${UPS[@]}"; do
      u_trim="$(echo "$u" | tr -d '[:space:]')"
      if [[ -n "$u_trim" ]]; then
        echo "server=$u_trim"
      fi
    done
  } >> "$DNSMASQ_CONF"
fi

# Bring interface up and set static IP (AP)
ip link set "$IFACE" down || true
ip addr flush dev "$IFACE" || true
ip addr add "$AP_IP/24" dev "$IFACE"
ip link set "$IFACE" up

# Enable IP forwarding and NAT (optional)
sysctl -w net.ipv4.ip_forward=1 >/dev/null

if ip link show "$FORWARD_IF" >/dev/null 2>&1; then
  iptables -t nat -C POSTROUTING -o "$FORWARD_IF" -s "$NET_IP" -j MASQUERADE 2>/dev/null || \
    iptables -t nat -A POSTROUTING -o "$FORWARD_IF" -s "$NET_IP" -j MASQUERADE
  iptables -C FORWARD -i "$FORWARD_IF" -o "$IFACE" -m state --state RELATED,ESTABLISHED -j ACCEPT 2>/dev/null || \
    iptables -A FORWARD -i "$FORWARD_IF" -o "$IFACE" -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -C FORWARD -i "$IFACE" -o "$FORWARD_IF" -j ACCEPT 2>/dev/null || \
    iptables -A FORWARD -i "$IFACE" -o "$FORWARD_IF" -j ACCEPT
fi

# Kill previous runs (best-effort)
pkill -f "hostapd.*$HOSTAPD_CONF" || true
pkill -f "dnsmasq.*$DNSMASQ_CONF" || true
pkill -f "tcpdump.*$IFACE" || true

# Start hostapd
echo "[+] Starting hostapd: $HOSTAPD_CONF"
hostapd "$HOSTAPD_CONF" 2>&1 | sed 's/^/[hostapd] /' &
HOSTAPD_PID=$!

# Start dnsmasq
echo "[+] Starting dnsmasq: $DNSMASQ_CONF"
dnsmasq --conf-file="$DNSMASQ_CONF" 2>&1 | sed 's/^/[dnsmasq] /' &
DNSMASQ_PID=$!

# Start tcpdump to show DNS queries and other metadata
echo "[+] Starting tcpdump on $IFACE (prints to stdout). Press Ctrl-C to stop."
tcpdump -n -i "$IFACE" -s 0 -l '(port 53) or (tcp) or (udp)' 2>&1 | sed 's/^/[tcpdump] /' &
TCPDUMP_PID=$!

echo "[+] Generated files in $TMPDIR"
echo "    hostapd: $HOSTAPD_CONF"
echo "    dnsmasq: $DNSMASQ_CONF"
echo "    addn-hosts: $HOSTS_FILE"
if [[ -n "$UPSTREAM_DNS" ]]; then
  echo "    upstream DNS: $UPSTREAM_DNS"
else
  echo "    upstream DNS: (system /etc/resolv.conf)"
fi
echo
echo "PIDs: hostapd=$HOSTAPD_PID dnsmasq=$DNSMASQ_PID tcpdump=$TCPDUMP_PID"
echo "AP iface: $IFACE  AP IP: $AP_IP  DHCP range: $DHCP_RANGE_START - $DHCP_RANGE_END"
echo

# cleanup on Ctrl-C
cleanup() {
  echo
  echo "[+] Caught signal â€” shutting down..."
  kill "$HOSTAPD_PID" 2>/dev/null || true
  kill "$DNSMASQ_PID" 2>/dev/null || true
  kill "$TCPDUMP_PID" 2>/dev/null || true

  # remove NAT rules we added (best-effort)
  if ip link show "$FORWARD_IF" >/dev/null 2>&1; then
    iptables -t nat -D POSTROUTING -o "$FORWARD_IF" -s "$NET_IP" -j MASQUERADE 2>/dev/null || true
    iptables -D FORWARD -i "$FORWARD_IF" -o "$IFACE" -m state --state RELATED,ESTABLISHED -j ACCEPT 2>/dev/null || true
    iptables -D FORWARD -i "$IFACE" -o "$FORWARD_IF" -j ACCEPT 2>/dev/null || true
  fi

  # bring interface down / flush IP
  ip addr flush dev "$IFACE" || true
  ip link set "$IFACE" down || true

  sysctl -w net.ipv4.ip_forward=0 >/dev/null || true

  # leave tmp files for inspection but you can delete them
  echo "[+] Temporary files kept in: $TMPDIR"
  echo "[+] Exiting."
  exit 0
}

trap cleanup INT TERM

wait
